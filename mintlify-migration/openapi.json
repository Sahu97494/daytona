{
  "openapi": "3.0.0",
  "paths": {
    "/api-keys": {
      "post": {
        "operationId": "createApiKey",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKey"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API key created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create API key",
        "tags": [
          "api-keys"
        ]
      },
      "get": {
        "operationId": "listApiKeys",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API keys retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyList"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error fetching API keys."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List API keys",
        "tags": [
          "api-keys"
        ]
      }
    },
    "/api-keys/current": {
      "get": {
        "operationId": "getCurrentApiKey",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyList"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get current API key's details",
        "tags": [
          "api-keys"
        ]
      }
    },
    "/api-keys/{name}": {
      "get": {
        "operationId": "getApiKey",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyList"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get API key",
        "tags": [
          "api-keys"
        ]
      },
      "delete": {
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API key deleted successfully."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete API key",
        "tags": [
          "api-keys"
        ]
      }
    },
    "/organizations/invitations": {
      "get": {
        "operationId": "listOrganizationInvitationsForAuthenticatedUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of organization invitations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInvitation"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List organization invitations for authenticated user",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/invitations/count": {
      "get": {
        "operationId": "getOrganizationInvitationsCountForAuthenticatedUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Count of organization invitations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get count of organization invitations for authenticated user",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/invitations/{invitationId}/accept": {
      "post": {
        "operationId": "acceptOrganizationInvitation",
        "parameters": [
          {
            "name": "invitationId",
            "required": true,
            "in": "path",
            "description": "Invitation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization invitation accepted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Accept organization invitation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/invitations/{invitationId}/decline": {
      "post": {
        "operationId": "declineOrganizationInvitation",
        "parameters": [
          {
            "name": "invitationId",
            "required": true,
            "in": "path",
            "description": "Invitation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization invitation declined successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Decline organization invitation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations": {
      "post": {
        "operationId": "createOrganization",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganization"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create organization",
        "tags": [
          "organizations"
        ]
      },
      "get": {
        "operationId": "listOrganizations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List organizations",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}": {
      "get": {
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get organization by ID",
        "tags": [
          "organizations"
        ]
      },
      "delete": {
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/usage": {
      "get": {
        "operationId": "getOrganizationUsageOverview",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current usage overview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageOverview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get organization current usage overview",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/quota": {
      "patch": {
        "operationId": "updateOrganizationQuota",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationQuota"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Update organization quota",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/leave": {
      "post": {
        "operationId": "leaveOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization left successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Leave organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/suspend": {
      "post": {
        "operationId": "suspendOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSuspension"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Organization suspended successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Suspend organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/unsuspend": {
      "post": {
        "operationId": "unsuspendOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization unsuspended successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Unsuspend organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/roles": {
      "post": {
        "operationId": "createOrganizationRole",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create organization role",
        "tags": [
          "organizations"
        ]
      },
      "get": {
        "operationId": "listOrganizationRoles",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of organization roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationRole"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List organization roles",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/roles/{roleId}": {
      "put": {
        "operationId": "updateOrganizationRole",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "description": "Role ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Update organization role",
        "tags": [
          "organizations"
        ]
      },
      "delete": {
        "operationId": "deleteOrganizationRole",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "description": "Role ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization role deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete organization role",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/users": {
      "get": {
        "operationId": "listOrganizationMembers",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of organization members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationUser"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List organization members",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}/role": {
      "post": {
        "operationId": "updateRoleForOrganizationMember",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationMemberRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Update role for organization member",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}/assigned-roles": {
      "post": {
        "operationId": "updateAssignedOrganizationRoles",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssignedOrganizationRoles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assigned roles updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Update assigned roles to organization member",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}": {
      "delete": {
        "operationId": "deleteOrganizationMember",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User removed from organization successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete organization member",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/invitations": {
      "post": {
        "operationId": "createOrganizationInvitation",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationInvitation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization invitation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create organization invitation",
        "tags": [
          "organizations"
        ]
      },
      "get": {
        "operationId": "listOrganizationInvitations",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pending organization invitations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInvitation"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List pending organization invitations",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/invitations/{invitationId}": {
      "put": {
        "operationId": "updateOrganizationInvitation",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitationId",
            "required": true,
            "in": "path",
            "description": "Invitation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationInvitation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization invitation updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Update organization invitation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{organizationId}/invitations/{invitationId}/cancel": {
      "post": {
        "operationId": "cancelOrganizationInvitation",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitationId",
            "required": true,
            "in": "path",
            "description": "Invitation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization invitation cancelled successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Cancel organization invitation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "getAuthenticatedUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get authenticated user",
        "tags": [
          "users"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create user",
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "listUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List all users",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/regenerate-key-pair": {
      "post": {
        "operationId": "regenerateKeyPair",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Regenerate user key pair",
        "tags": [
          "users"
        ]
      }
    },
    "/users/account-providers": {
      "get": {
        "operationId": "getAvailableAccountProviders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available account providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountProvider"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get available account providers",
        "tags": [
          "users"
        ]
      }
    },
    "/users/linked-accounts": {
      "post": {
        "operationId": "linkAccount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkedAccount"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Account linked successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Link account",
        "tags": [
          "users"
        ]
      }
    },
    "/users/linked-accounts/{provider}/{providerUserId}": {
      "delete": {
        "operationId": "unlinkAccount",
        "parameters": [
          {
            "name": "provider",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerUserId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account unlinked successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Unlink account",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get user by ID",
        "tags": [
          "users"
        ]
      }
    },
    "/sandbox": {
      "get": {
        "operationId": "listSandboxes",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "required": false,
            "in": "query",
            "description": "Include verbose output",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "labels",
            "required": false,
            "in": "query",
            "description": "JSON encoded labels to filter by",
            "schema": {
              "example": "{\"label1\": \"value1\", \"label2\": \"value2\"}",
              "type": "string"
            }
          },
          {
            "name": "includeErroredDeleted",
            "required": false,
            "in": "query",
            "description": "Include errored and deleted sandboxes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all sandboxes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sandbox"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List all sandboxes",
        "tags": [
          "sandbox"
        ]
      },
      "post": {
        "operationId": "createSandbox",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSandbox"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The sandbox has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sandbox"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create a new sandbox",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}": {
      "get": {
        "operationId": "getSandbox",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "required": false,
            "in": "query",
            "description": "Include verbose output",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sandbox"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get sandbox details",
        "tags": [
          "sandbox"
        ]
      },
      "delete": {
        "operationId": "deleteSandbox",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox has been deleted"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete sandbox",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/start": {
      "post": {
        "operationId": "startSandbox",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox has been started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sandbox"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Start sandbox",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/stop": {
      "post": {
        "operationId": "stopSandbox",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox has been stopped"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Stop sandbox",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/labels": {
      "put": {
        "operationId": "replaceLabels",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxLabels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Labels have been successfully replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxLabels"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Replace sandbox labels",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/backup": {
      "post": {
        "operationId": "createBackup",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox backup has been initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sandbox"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create sandbox backup",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/public/{isPublic}": {
      "post": {
        "operationId": "updatePublicStatus",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPublic",
            "required": true,
            "in": "path",
            "description": "Public status to set",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Update public status",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/autostop/{interval}": {
      "post": {
        "operationId": "setAutostopInterval",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "required": true,
            "in": "path",
            "description": "Auto-stop interval in minutes (0 to disable)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Auto-stop interval has been set"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Set sandbox auto-stop interval",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/autoarchive/{interval}": {
      "post": {
        "operationId": "setAutoArchiveInterval",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "required": true,
            "in": "path",
            "description": "Auto-archive interval in minutes (0 means the maximum interval will be used)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Auto-archive interval has been set"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Set sandbox auto-archive interval",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/archive": {
      "post": {
        "operationId": "archiveSandbox",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox has been archived"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Archive sandbox",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/ports/{port}/preview-url": {
      "get": {
        "operationId": "getPortPreviewUrl",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "required": true,
            "in": "path",
            "description": "Port number to get preview URL for",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preview URL for the specified port",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortPreviewUrl"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get preview URL for a sandbox port",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/sandbox/{sandboxId}/build-logs": {
      "get": {
        "operationId": "getBuildLogs",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "follow",
            "required": false,
            "in": "query",
            "description": "Whether to follow the logs stream",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Build logs stream"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get build logs",
        "tags": [
          "sandbox"
        ]
      }
    },
    "/runners": {
      "post": {
        "operationId": "createRunner",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRunner"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create runner",
        "tags": [
          "runners"
        ]
      },
      "get": {
        "operationId": "listRunners",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List all runners",
        "tags": [
          "runners"
        ]
      }
    },
    "/runners/{id}/scheduling": {
      "patch": {
        "operationId": "updateRunnerScheduling",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Update runner scheduling status",
        "tags": [
          "runners"
        ]
      }
    },
    "/runners/by-sandbox/{sandboxId}": {
      "get": {
        "operationId": "getRunnerBySandboxId",
        "parameters": [
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Runner found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get runner by sandbox ID",
        "tags": [
          "runners"
        ]
      }
    },
    "/runners/by-snapshot": {
      "get": {
        "operationId": "getRunnersBySnapshotInternalName",
        "parameters": [
          {
            "name": "internalName",
            "required": true,
            "in": "query",
            "description": "Internal name of the snapshot",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Runners found for the snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunnerSnapshotDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get runners by snapshot internal name",
        "tags": [
          "runners"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/project-dir": {
      "get": {
        "operationId": "getProjectDir",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project directory retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDirResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get sandbox project dir",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files": {
      "get": {
        "operationId": "listFiles",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Files listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List files",
        "tags": [
          "toolbox"
        ]
      },
      "delete": {
        "description": "Delete file inside sandbox",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete file",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/download": {
      "get": {
        "description": "Download file from sandbox",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Download file",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/find": {
      "get": {
        "description": "Search for text/pattern inside sandbox files",
        "operationId": "findInFiles",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pattern",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Match"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Search for text/pattern in files",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/folder": {
      "post": {
        "description": "Create folder inside sandbox",
        "operationId": "createFolder",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder created successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create folder",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/info": {
      "get": {
        "description": "Get file info inside sandbox",
        "operationId": "getFileInfo",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File info retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get file info",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/move": {
      "post": {
        "description": "Move file inside sandbox",
        "operationId": "moveFile",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File moved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Move file",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/permissions": {
      "post": {
        "description": "Set file owner/group/permissions inside sandbox",
        "operationId": "setFilePermissions",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File permissions updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Set file permissions",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/replace": {
      "post": {
        "description": "Replace text/pattern in multiple files inside sandbox",
        "operationId": "replaceInFiles",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text replaced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReplaceResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Replace in files",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/search": {
      "get": {
        "description": "Search for files inside sandbox",
        "operationId": "searchFiles",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pattern",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchFilesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Search files",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/upload": {
      "post": {
        "deprecated": true,
        "description": "Upload file inside sandbox",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Upload file",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/files/bulk-upload": {
      "post": {
        "description": "Upload multiple files inside sandbox",
        "operationId": "uploadFiles",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UploadFile"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Files uploaded successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Upload multiple files",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/add": {
      "post": {
        "description": "Add files to git commit",
        "operationId": "gitAddFiles",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitAddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Files added to git successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Add files",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/branches": {
      "get": {
        "description": "Get branch list from git repository",
        "operationId": "gitListBranches",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Branch list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBranchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get branch list",
        "tags": [
          "toolbox"
        ]
      },
      "post": {
        "description": "Create branch on git repository",
        "operationId": "gitCreateBranch",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitBranchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branch created successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create branch",
        "tags": [
          "toolbox"
        ]
      },
      "delete": {
        "description": "Delete branch on git repository",
        "operationId": "gitDeleteBranch",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitDeleteBranchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branch deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete branch",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/clone": {
      "post": {
        "description": "Clone git repository",
        "operationId": "gitCloneRepository",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitCloneRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Repository cloned successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Clone repository",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/commit": {
      "post": {
        "description": "Commit changes to git repository",
        "operationId": "gitCommitChanges",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitCommitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changes committed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitCommitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Commit changes",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/history": {
      "get": {
        "description": "Get commit history from git repository",
        "operationId": "gitGetHistory",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Commit history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitCommitInfo"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get commit history",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/pull": {
      "post": {
        "description": "Pull changes from remote",
        "operationId": "gitPullChanges",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitRepoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changes pulled successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Pull changes",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/push": {
      "post": {
        "description": "Push changes to remote",
        "operationId": "gitPushChanges",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitRepoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changes pushed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Push changes",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/checkout": {
      "post": {
        "description": "Checkout branch or commit in git repository",
        "operationId": "gitCheckoutBranch",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitCheckoutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branch checked out successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Checkout branch",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/git/status": {
      "get": {
        "description": "Get status from git repository",
        "operationId": "gitGetStatus",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Git status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get git status",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/process/execute": {
      "post": {
        "description": "Execute command synchronously inside sandbox",
        "operationId": "executeCommand",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Execute command",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/process/session": {
      "get": {
        "description": "List all active sessions in the sandbox",
        "operationId": "listSessions",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sessions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List sessions",
        "tags": [
          "toolbox"
        ]
      },
      "post": {
        "description": "Create a new session in the sandbox",
        "operationId": "createSession",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create session",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/process/session/{sessionId}": {
      "get": {
        "description": "Get session by ID",
        "operationId": "getSession",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get session",
        "tags": [
          "toolbox"
        ]
      },
      "delete": {
        "description": "Delete a specific session",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete session",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/exec": {
      "post": {
        "description": "Execute a command in a specific session",
        "operationId": "executeSessionCommand",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionExecuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionExecuteResponse"
                }
              }
            }
          },
          "202": {
            "description": "Command accepted and is being processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionExecuteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Execute command in session",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}": {
      "get": {
        "description": "Get session command by ID",
        "operationId": "getSessionCommand",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commandId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session command retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get session command",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}/logs": {
      "get": {
        "description": "Get logs for a specific command in a session",
        "operationId": "getSessionCommandLogs",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commandId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "follow",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Command log stream",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get command logs",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/lsp/completions": {
      "post": {
        "description": "The Completion request is sent from the client to the server to compute completion items at a given cursor position.",
        "operationId": "LspCompletions",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LspCompletionParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionList"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get Lsp Completions",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/lsp/did-close": {
      "post": {
        "description": "The document close notification is sent from the client to the server when the document got closed in the client.",
        "operationId": "LspDidClose",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LspDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Call Lsp DidClose",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/lsp/did-open": {
      "post": {
        "description": "The document open notification is sent from the client to the server to signal newly opened text documents.",
        "operationId": "LspDidOpen",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LspDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Call Lsp DidOpen",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/lsp/document-symbols": {
      "get": {
        "description": "The document symbol request is sent from the client to the server.",
        "operationId": "LspDocumentSymbols",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pathToProject",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uri",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LspSymbol"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Call Lsp DocumentSymbols",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/lsp/start": {
      "post": {
        "description": "Start Lsp server process inside sandbox project",
        "operationId": "LspStart",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LspServerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Start Lsp server",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/lsp/stop": {
      "post": {
        "description": "Stop Lsp server process inside sandbox project",
        "operationId": "LspStop",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LspServerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Stop Lsp server",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/toolbox/{sandboxId}/toolbox/lsp/workspace-symbols": {
      "get": {
        "description": "The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.",
        "operationId": "LspWorkspaceSymbols",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pathToProject",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LspSymbol"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Call Lsp WorkspaceSymbols",
        "tags": [
          "toolbox"
        ]
      }
    },
    "/snapshots": {
      "post": {
        "operationId": "createSnapshot",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSnapshot"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The snapshot has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Snapshots with tag \":latest\" are not allowed"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create a new snapshot",
        "tags": [
          "snapshots"
        ]
      },
      "get": {
        "operationId": "getAllSnapshots",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all snapshots with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSnapshotsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List all snapshots",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/snapshots/{id}": {
      "get": {
        "operationId": "getSnapshot",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Snapshot ID or name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotDto"
                }
              }
            }
          },
          "404": {
            "description": "Snapshot not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get snapshot by ID or name",
        "tags": [
          "snapshots"
        ]
      },
      "delete": {
        "operationId": "removeSnapshot",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Snapshot ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Snapshot has been deleted"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete snapshot",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/snapshots/{id}/toggle": {
      "patch": {
        "operationId": "toggleSnapshotState",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Snapshot ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleState"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Snapshot state has been toggled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Toggle snapshot state",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/snapshots/{id}/general": {
      "patch": {
        "operationId": "setSnapshotGeneralStatus",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Snapshot ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSnapshotGeneralStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Snapshot general status has been set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Set snapshot general status",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/snapshots/{id}/build-logs": {
      "get": {
        "operationId": "getSnapshotBuildLogs",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Snapshot ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "follow",
            "required": false,
            "in": "query",
            "description": "Whether to follow the logs stream",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get snapshot build logs",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/snapshots/{id}/activate": {
      "post": {
        "operationId": "activateSnapshot",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Snapshot ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The snapshot has been successfully activated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Snapshot is already active, not in inactive state, or has associated snapshot runners"
          },
          "404": {
            "description": "Snapshot not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Activate a snapshot",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/workspace": {
      "get": {
        "deprecated": true,
        "operationId": "listWorkspaces_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "required": false,
            "in": "query",
            "description": "Include verbose output",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "labels",
            "required": false,
            "in": "query",
            "description": "JSON encoded labels to filter by",
            "schema": {
              "example": "{\"label1\": \"value1\", \"label2\": \"value2\"}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all workspacees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workspace"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] List all workspaces",
        "tags": [
          "workspace"
        ]
      },
      "post": {
        "deprecated": true,
        "operationId": "createWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspace"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The workspace has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Create a new workspace",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}": {
      "get": {
        "deprecated": true,
        "operationId": "getWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "required": false,
            "in": "query",
            "description": "Include verbose output",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Get workspace details",
        "tags": [
          "workspace"
        ]
      },
      "delete": {
        "deprecated": true,
        "operationId": "deleteWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace has been deleted"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Delete workspace",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/start": {
      "post": {
        "deprecated": true,
        "operationId": "startWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace has been started"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Start workspace",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/stop": {
      "post": {
        "deprecated": true,
        "operationId": "stopWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace has been stopped"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Stop workspace",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/labels": {
      "put": {
        "deprecated": true,
        "operationId": "replaceLabelsWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxLabels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Labels have been successfully replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxLabels"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Replace workspace labels",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/backup": {
      "post": {
        "deprecated": true,
        "operationId": "createBackupWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace backup has been initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Create workspace backup",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/public/{isPublic}": {
      "post": {
        "deprecated": true,
        "operationId": "updatePublicStatusWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPublic",
            "required": true,
            "in": "path",
            "description": "Public status to set",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Update public status",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/autostop/{interval}": {
      "post": {
        "deprecated": true,
        "operationId": "setAutostopIntervalWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "required": true,
            "in": "path",
            "description": "Auto-stop interval in minutes (0 to disable)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Auto-stop interval has been set"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Set workspace auto-stop interval",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/autoarchive/{interval}": {
      "post": {
        "deprecated": true,
        "operationId": "setAutoArchiveIntervalWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "required": true,
            "in": "path",
            "description": "Auto-archive interval in minutes (0 means the maximum interval will be used)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Auto-archive interval has been set"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Set workspace auto-archive interval",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/archive": {
      "post": {
        "deprecated": true,
        "operationId": "archiveWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace has been archived"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Archive workspace",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/ports/{port}/preview-url": {
      "get": {
        "deprecated": true,
        "operationId": "getPortPreviewUrlWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "required": true,
            "in": "path",
            "description": "Port number to get preview URL for",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preview URL for the specified port",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortPreviewUrl"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Get preview URL for a workspace port",
        "tags": [
          "workspace"
        ]
      }
    },
    "/workspace/{workspaceId}/build-logs": {
      "get": {
        "deprecated": true,
        "operationId": "getBuildLogsWorkspace_deprecated",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "ID of the workspace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "follow",
            "required": false,
            "in": "query",
            "description": "Whether to follow the logs stream",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Build logs stream"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "[DEPRECATED] Get build logs",
        "tags": [
          "workspace"
        ]
      }
    },
    "/preview/{sandboxId}/public": {
      "get": {
        "operationId": "isSandboxPublic",
        "parameters": [
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public status of the sandbox",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "summary": "Check if sandbox is public",
        "tags": [
          "preview"
        ]
      }
    },
    "/preview/{sandboxId}/validate/{authToken}": {
      "get": {
        "operationId": "isValidAuthToken",
        "parameters": [
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "description": "ID of the sandbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authToken",
            "required": true,
            "in": "path",
            "description": "Auth token of the sandbox",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sandbox auth token validation status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "summary": "Check if sandbox auth token is valid",
        "tags": [
          "preview"
        ]
      }
    },
    "/preview/{sandboxId}/access": {
      "get": {
        "operationId": "hasSandboxAccess",
        "parameters": [
          {
            "name": "sandboxId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Check if user has access to the sandbox",
        "tags": [
          "preview"
        ]
      }
    },
    "/volumes": {
      "get": {
        "operationId": "listVolumes",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDeleted",
            "required": false,
            "in": "query",
            "description": "Include deleted volumes in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all volumes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VolumeDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List all volumes",
        "tags": [
          "volumes"
        ]
      },
      "post": {
        "operationId": "createVolume",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVolume"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The volume has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create a new volume",
        "tags": [
          "volumes"
        ]
      }
    },
    "/volumes/{volumeId}": {
      "get": {
        "operationId": "getVolume",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "volumeId",
            "required": true,
            "in": "path",
            "description": "ID of the volume",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Volume details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get volume details",
        "tags": [
          "volumes"
        ]
      },
      "delete": {
        "operationId": "deleteVolume",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "volumeId",
            "required": true,
            "in": "path",
            "description": "ID of the volume",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Volume has been marked for deletion"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete volume",
        "tags": [
          "volumes"
        ]
      }
    },
    "/volumes/by-name/{name}": {
      "get": {
        "operationId": "getVolumeByName",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Name of the volume",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Volume details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get volume details by name",
        "tags": [
          "volumes"
        ]
      }
    },
    "/docker-registry": {
      "post": {
        "operationId": "createRegistry",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDockerRegistry"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The docker registry has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DockerRegistry"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Create registry",
        "tags": [
          "docker-registry"
        ]
      },
      "get": {
        "operationId": "listRegistries",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all docker registries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DockerRegistry"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "List registries",
        "tags": [
          "docker-registry"
        ]
      }
    },
    "/docker-registry/registry-push-access": {
      "get": {
        "operationId": "getTransientPushAccess",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Temporary registry access has been generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryPushAccessDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get temporary registry access for pushing snapshots",
        "tags": [
          "docker-registry"
        ]
      }
    },
    "/docker-registry/{id}": {
      "get": {
        "operationId": "getRegistry",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the docker registry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The docker registry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DockerRegistry"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get registry",
        "tags": [
          "docker-registry"
        ]
      },
      "patch": {
        "operationId": "updateRegistry",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the docker registry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDockerRegistry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The docker registry has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DockerRegistry"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Update registry",
        "tags": [
          "docker-registry"
        ]
      },
      "delete": {
        "operationId": "deleteRegistry",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the docker registry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The docker registry has been successfully deleted."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Delete registry",
        "tags": [
          "docker-registry"
        ]
      }
    },
    "/docker-registry/{id}/set-default": {
      "post": {
        "operationId": "setDefaultRegistry",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the docker registry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The docker registry has been set as default.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DockerRegistry"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Set default registry",
        "tags": [
          "docker-registry"
        ]
      }
    },
    "/object-storage/push-access": {
      "get": {
        "operationId": "getPushAccess",
        "parameters": [
          {
            "name": "X-Daytona-Organization-ID",
            "in": "header",
            "description": "Use with JWT to specify the organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Temporary storage access has been generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageAccessDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "openid",
              "profile",
              "email"
            ]
          }
        ],
        "summary": "Get temporary storage access for pushing objects",
        "tags": [
          "object-storage"
        ]
      }
    }
  },
  "info": {
    "title": "Daytona",
    "description": "Daytona AI platform API Docs",
    "version": "1.0",
    "contact": {
      "name": "Daytona Platforms Inc.",
      "url": "https://www.daytona.io",
      "email": "support@daytona.com"
    }
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "description": "API Key access"
      },
      "oauth2": {
        "type": "openIdConnect",
        "openIdConnectUrl": "http://localhost:3000/.well-known/openid-configuration"
      }
    },
    "schemas": {
      "CreateApiKey": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the API key",
            "example": "My API Key"
          },
          "permissions": {
            "type": "array",
            "description": "The list of organization resource permissions assigned to the API key",
            "items": {
              "type": "string",
              "enum": [
                "write:registries",
                "delete:registries",
                "write:snapshots",
                "delete:snapshots",
                "write:sandboxes",
                "delete:sandboxes",
                "read:volumes",
                "write:volumes",
                "delete:volumes"
              ]
            }
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the API key expires",
            "example": "2025-06-09T12:00:00.000Z",
            "nullable": true
          }
        },
        "required": [
          "name",
          "permissions"
        ]
      },
      "ApiKeyResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the API key",
            "example": "My API Key"
          },
          "value": {
            "type": "string",
            "description": "The API key value",
            "example": "bb_sk_1234567890abcdef"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the API key was created",
            "example": "2024-03-14T12:00:00.000Z"
          },
          "permissions": {
            "type": "array",
            "description": "The list of organization resource permissions assigned to the API key",
            "items": {
              "type": "string",
              "enum": [
                "write:registries",
                "delete:registries",
                "write:snapshots",
                "delete:snapshots",
                "write:sandboxes",
                "delete:sandboxes",
                "read:volumes",
                "write:volumes",
                "delete:volumes"
              ]
            }
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the API key expires",
            "example": "2025-06-09T12:00:00.000Z",
            "nullable": true
          }
        },
        "required": [
          "name",
          "value",
          "createdAt",
          "permissions",
          "expiresAt"
        ]
      },
      "ApiKeyList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the API key",
            "example": "My API Key"
          },
          "value": {
            "type": "string",
            "description": "The masked API key value",
            "example": "bb_********************def"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the API key was created",
            "example": "2024-03-14T12:00:00.000Z"
          },
          "permissions": {
            "type": "array",
            "description": "The list of organization resource permissions assigned to the API key",
            "items": {
              "type": "string",
              "enum": [
                "write:registries",
                "delete:registries",
                "write:snapshots",
                "delete:snapshots",
                "write:sandboxes",
                "delete:sandboxes",
                "read:volumes",
                "write:volumes",
                "delete:volumes"
              ]
            }
          },
          "lastUsedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the API key was last used",
            "example": "2024-03-14T12:00:00.000Z",
            "nullable": true
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the API key expires",
            "example": "2024-03-14T12:00:00.000Z",
            "nullable": true
          }
        },
        "required": [
          "name",
          "value",
          "createdAt",
          "permissions",
          "lastUsedAt",
          "expiresAt"
        ]
      },
      "OrganizationRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Role ID"
          },
          "name": {
            "type": "string",
            "description": "Role name"
          },
          "description": {
            "type": "string",
            "description": "Role description"
          },
          "permissions": {
            "type": "array",
            "description": "Roles assigned to the user",
            "items": {
              "type": "string",
              "enum": [
                "write:registries",
                "delete:registries",
                "write:snapshots",
                "delete:snapshots",
                "write:sandboxes",
                "delete:sandboxes",
                "read:volumes",
                "write:volumes",
                "delete:volumes"
              ]
            }
          },
          "isGlobal": {
            "type": "boolean",
            "description": "Global role flag"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "permissions",
          "isGlobal",
          "createdAt",
          "updatedAt"
        ]
      },
      "OrganizationInvitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Invitation ID"
          },
          "email": {
            "type": "string",
            "description": "Email address of the invitee"
          },
          "invitedBy": {
            "type": "string",
            "description": "Email address of the inviter"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "organizationName": {
            "type": "string",
            "description": "Organization name"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date of the invitation"
          },
          "status": {
            "type": "string",
            "description": "Invitation status",
            "enum": [
              "pending",
              "accepted",
              "declined",
              "cancelled"
            ]
          },
          "role": {
            "type": "string",
            "description": "Member role",
            "enum": [
              "owner",
              "member"
            ]
          },
          "assignedRoles": {
            "description": "Assigned roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationRole"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "email",
          "invitedBy",
          "organizationId",
          "organizationName",
          "expiresAt",
          "status",
          "role",
          "assignedRoles",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateOrganization": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of organization",
            "example": "My Organization"
          }
        },
        "required": [
          "name"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "createdBy": {
            "type": "string",
            "description": "User ID of the organization creator"
          },
          "personal": {
            "type": "boolean",
            "description": "Personal organization flag"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          },
          "suspended": {
            "type": "boolean",
            "description": "Suspended flag"
          },
          "suspendedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Suspended at"
          },
          "suspensionReason": {
            "type": "string",
            "description": "Suspended reason"
          },
          "suspendedUntil": {
            "format": "date-time",
            "type": "string",
            "description": "Suspended until"
          }
        },
        "required": [
          "id",
          "name",
          "createdBy",
          "personal",
          "createdAt",
          "updatedAt",
          "suspended",
          "suspendedAt",
          "suspensionReason",
          "suspendedUntil"
        ]
      },
      "UsageOverview": {
        "type": "object",
        "properties": {
          "totalCpuQuota": {
            "type": "number"
          },
          "totalGpuQuota": {
            "type": "number"
          },
          "totalMemoryQuota": {
            "type": "number"
          },
          "totalDiskQuota": {
            "type": "number"
          },
          "currentCpuUsage": {
            "type": "number"
          },
          "currentMemoryUsage": {
            "type": "number"
          },
          "currentDiskUsage": {
            "type": "number"
          }
        },
        "required": [
          "totalCpuQuota",
          "totalGpuQuota",
          "totalMemoryQuota",
          "totalDiskQuota",
          "currentCpuUsage",
          "currentMemoryUsage",
          "currentDiskUsage"
        ]
      },
      "UpdateOrganizationQuota": {
        "type": "object",
        "properties": {
          "totalCpuQuota": {
            "type": "number",
            "nullable": true
          },
          "totalMemoryQuota": {
            "type": "number",
            "nullable": true
          },
          "totalDiskQuota": {
            "type": "number",
            "nullable": true
          },
          "maxCpuPerSandbox": {
            "type": "number",
            "nullable": true
          },
          "maxMemoryPerSandbox": {
            "type": "number",
            "nullable": true
          },
          "maxDiskPerSandbox": {
            "type": "number",
            "nullable": true
          },
          "snapshotQuota": {
            "type": "number",
            "nullable": true
          },
          "maxSnapshotSize": {
            "type": "number",
            "nullable": true
          },
          "volumeQuota": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "totalCpuQuota",
          "totalMemoryQuota",
          "totalDiskQuota",
          "maxCpuPerSandbox",
          "maxMemoryPerSandbox",
          "maxDiskPerSandbox",
          "snapshotQuota",
          "maxSnapshotSize",
          "volumeQuota"
        ]
      },
      "OrganizationSuspension": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Suspension reason"
          },
          "until": {
            "format": "date-time",
            "type": "string",
            "description": "Suspension until"
          }
        },
        "required": [
          "reason",
          "until"
        ]
      },
      "CreateOrganizationRole": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the role",
            "example": "Maintainer"
          },
          "description": {
            "type": "string",
            "description": "The description of the role",
            "example": "Can manage all resources"
          },
          "permissions": {
            "type": "array",
            "description": "The list of permissions assigned to the role",
            "items": {
              "type": "string",
              "enum": [
                "write:registries",
                "delete:registries",
                "write:snapshots",
                "delete:snapshots",
                "write:sandboxes",
                "delete:sandboxes",
                "read:volumes",
                "write:volumes",
                "delete:volumes"
              ]
            }
          }
        },
        "required": [
          "name",
          "description",
          "permissions"
        ]
      },
      "UpdateOrganizationRole": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the role",
            "example": "Maintainer"
          },
          "description": {
            "type": "string",
            "description": "The description of the role",
            "example": "Can manage all resources"
          },
          "permissions": {
            "type": "array",
            "description": "The list of permissions assigned to the role",
            "items": {
              "type": "string",
              "enum": [
                "write:registries",
                "delete:registries",
                "write:snapshots",
                "delete:snapshots",
                "write:sandboxes",
                "delete:sandboxes",
                "read:volumes",
                "write:volumes",
                "delete:volumes"
              ]
            }
          }
        },
        "required": [
          "name",
          "description",
          "permissions"
        ]
      },
      "OrganizationUser": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "description": "User name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "role": {
            "type": "string",
            "description": "Member role",
            "enum": [
              "owner",
              "member"
            ]
          },
          "assignedRoles": {
            "description": "Roles assigned to the user",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationRole"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "userId",
          "organizationId",
          "name",
          "email",
          "role",
          "assignedRoles",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateOrganizationMemberRole": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Organization member role",
            "enum": [
              "owner",
              "member"
            ]
          }
        },
        "required": [
          "role"
        ]
      },
      "UpdateAssignedOrganizationRoles": {
        "type": "object",
        "properties": {
          "roleIds": {
            "description": "Array of role IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "roleIds"
        ]
      },
      "CreateOrganizationInvitation": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the invitee",
            "example": "mail@example.com"
          },
          "role": {
            "type": "string",
            "description": "Organization member role for the invitee",
            "enum": [
              "owner",
              "member"
            ],
            "default": "member"
          },
          "assignedRoleIds": {
            "description": "Array of assigned role IDs for the invitee",
            "default": [
              "00000000-0000-0000-0000-000000000001"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date of the invitation",
            "example": "2021-12-31T23:59:59Z"
          }
        },
        "required": [
          "email",
          "role",
          "assignedRoleIds"
        ]
      },
      "UpdateOrganizationInvitation": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Organization member role",
            "enum": [
              "owner",
              "member"
            ]
          },
          "assignedRoleIds": {
            "description": "Array of role IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date of the invitation",
            "example": "2021-12-31T23:59:59Z"
          }
        },
        "required": [
          "role",
          "assignedRoleIds"
        ]
      },
      "UserPublicKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Public key"
          },
          "name": {
            "type": "string",
            "description": "Key name"
          }
        },
        "required": [
          "key",
          "name"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "description": "User name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "publicKeys": {
            "description": "User public keys",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPublicKey"
            }
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "publicKeys"
        ]
      },
      "CreateOrganizationQuota": {
        "type": "object",
        "properties": {
          "totalCpuQuota": {
            "type": "number"
          },
          "totalMemoryQuota": {
            "type": "number"
          },
          "totalDiskQuota": {
            "type": "number"
          },
          "maxCpuPerSandbox": {
            "type": "number"
          },
          "maxMemoryPerSandbox": {
            "type": "number"
          },
          "maxDiskPerSandbox": {
            "type": "number"
          },
          "snapshotQuota": {
            "type": "number"
          },
          "maxSnapshotSize": {
            "type": "number"
          },
          "volumeQuota": {
            "type": "number"
          }
        }
      },
      "CreateUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "personalOrganizationQuota": {
            "$ref": "#/components/schemas/CreateOrganizationQuota"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          },
          "emailVerified": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "AccountProvider": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "displayName"
        ]
      },
      "CreateLinkedAccount": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The authentication provider of the secondary account"
          },
          "userId": {
            "type": "string",
            "description": "The user ID of the secondary account"
          }
        },
        "required": [
          "provider",
          "userId"
        ]
      },
      "SandboxState": {
        "type": "string",
        "enum": [
          "creating",
          "restoring",
          "destroyed",
          "destroying",
          "started",
          "stopped",
          "starting",
          "stopping",
          "error",
          "build_failed",
          "pending_build",
          "building_snapshot",
          "unknown",
          "pulling_snapshot",
          "archiving",
          "archived"
        ],
        "description": "The state of the sandbox"
      },
      "SandboxDesiredState": {
        "type": "string",
        "enum": [
          "destroyed",
          "started",
          "stopped",
          "resized",
          "archived"
        ],
        "description": "The desired state of the sandbox"
      },
      "SandboxVolume": {
        "type": "object",
        "properties": {
          "volumeId": {
            "type": "string",
            "description": "The ID of the volume",
            "example": "volume123"
          },
          "mountPath": {
            "type": "string",
            "description": "The mount path for the volume",
            "example": "/data"
          }
        },
        "required": [
          "volumeId",
          "mountPath"
        ]
      },
      "BuildInfo": {
        "type": "object",
        "properties": {
          "dockerfileContent": {
            "type": "string",
            "description": "The Dockerfile content used for the build",
            "example": "FROM node:14\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD [\"npm\", \"start\"]"
          },
          "contextHashes": {
            "description": "The context hashes used for the build",
            "example": [
              "hash1",
              "hash2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The last update timestamp"
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ]
      },
      "Sandbox": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the sandbox",
            "example": "sandbox123"
          },
          "organizationId": {
            "type": "string",
            "description": "The organization ID of the sandbox",
            "example": "organization123"
          },
          "snapshot": {
            "type": "string",
            "description": "The snapshot used for the sandbox",
            "example": "daytonaio/sandbox:latest"
          },
          "user": {
            "type": "string",
            "description": "The user associated with the project",
            "example": "daytona"
          },
          "env": {
            "type": "object",
            "description": "Environment variables for the sandbox",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "NODE_ENV": "production"
            }
          },
          "labels": {
            "type": "object",
            "description": "Labels for the sandbox",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "daytona.io/public": "true"
            }
          },
          "public": {
            "type": "boolean",
            "description": "Whether the sandbox http preview is public",
            "example": false
          },
          "target": {
            "type": "string",
            "description": "The target environment for the sandbox",
            "example": "local"
          },
          "cpu": {
            "type": "number",
            "description": "The CPU quota for the sandbox",
            "example": 2
          },
          "gpu": {
            "type": "number",
            "description": "The GPU quota for the sandbox",
            "example": 0
          },
          "memory": {
            "type": "number",
            "description": "The memory quota for the sandbox",
            "example": 4
          },
          "disk": {
            "type": "number",
            "description": "The disk quota for the sandbox",
            "example": 10
          },
          "state": {
            "description": "The state of the sandbox",
            "example": "creating",
            "allOf": [
              {
                "$ref": "#/components/schemas/SandboxState"
              }
            ]
          },
          "desiredState": {
            "description": "The desired state of the sandbox",
            "example": "destroyed",
            "allOf": [
              {
                "$ref": "#/components/schemas/SandboxDesiredState"
              }
            ]
          },
          "errorReason": {
            "type": "string",
            "description": "The error reason of the sandbox",
            "example": "The sandbox is not running"
          },
          "backupState": {
            "type": "string",
            "description": "The state of the backup",
            "enum": [
              "None",
              "Pending",
              "InProgress",
              "Completed",
              "Error"
            ],
            "example": "None"
          },
          "backupCreatedAt": {
            "type": "string",
            "description": "The creation timestamp of the last backup",
            "example": "2024-10-01T12:00:00Z"
          },
          "autoStopInterval": {
            "type": "number",
            "description": "Auto-stop interval in minutes (0 means disabled)",
            "example": 30
          },
          "autoArchiveInterval": {
            "type": "number",
            "description": "Auto-archive interval in minutes",
            "example": 10080
          },
          "runnerDomain": {
            "type": "string",
            "description": "The domain name of the runner",
            "example": "runner.example.com"
          },
          "volumes": {
            "description": "Array of volumes attached to the sandbox",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SandboxVolume"
            }
          },
          "buildInfo": {
            "description": "Build information for the sandbox",
            "allOf": [
              {
                "$ref": "#/components/schemas/BuildInfo"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the sandbox",
            "example": "2024-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the sandbox",
            "example": "2024-10-01T12:00:00Z"
          },
          "class": {
            "type": "string",
            "description": "The class of the sandbox",
            "enum": [
              "small",
              "medium",
              "large"
            ],
            "example": "small",
            "deprecated": true
          },
          "daemonVersion": {
            "type": "string",
            "description": "The version of the daemon running in the sandbox",
            "example": "1.0.0"
          }
        },
        "required": [
          "id",
          "organizationId",
          "user",
          "env",
          "labels",
          "public",
          "target",
          "cpu",
          "gpu",
          "memory",
          "disk"
        ]
      },
      "CreateBuildInfo": {
        "type": "object",
        "properties": {
          "dockerfileContent": {
            "type": "string",
            "description": "The Dockerfile content used for the build",
            "example": "FROM node:14\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD [\"npm\", \"start\"]"
          },
          "contextHashes": {
            "description": "The context hashes used for the build",
            "example": [
              "hash1",
              "hash2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "dockerfileContent"
        ]
      },
      "CreateSandbox": {
        "type": "object",
        "properties": {
          "snapshot": {
            "type": "string",
            "description": "The ID or name of the snapshot used for the sandbox",
            "example": "ubuntu-4vcpu-8ram-100gb"
          },
          "user": {
            "type": "string",
            "description": "The user associated with the project",
            "example": "daytona"
          },
          "env": {
            "type": "object",
            "description": "Environment variables for the sandbox",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "NODE_ENV": "production"
            }
          },
          "labels": {
            "type": "object",
            "description": "Labels for the sandbox",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "daytona.io/public": "true"
            }
          },
          "public": {
            "type": "boolean",
            "description": "Whether the sandbox http preview is publicly accessible",
            "example": false
          },
          "class": {
            "type": "string",
            "description": "The sandbox class type",
            "enum": [
              "small",
              "medium",
              "large"
            ],
            "example": "small"
          },
          "target": {
            "type": "string",
            "description": "The target (region) where the sandbox will be created",
            "enum": [
              "eu",
              "us",
              "asia"
            ],
            "example": "eu"
          },
          "cpu": {
            "type": "integer",
            "description": "CPU cores allocated to the sandbox",
            "example": 2
          },
          "gpu": {
            "type": "integer",
            "description": "GPU units allocated to the sandbox",
            "example": 1
          },
          "memory": {
            "type": "integer",
            "description": "Memory allocated to the sandbox in GB",
            "example": 1
          },
          "disk": {
            "type": "integer",
            "description": "Disk space allocated to the sandbox in GB",
            "example": 3
          },
          "autoStopInterval": {
            "type": "integer",
            "description": "Auto-stop interval in minutes (0 means disabled)",
            "example": 30
          },
          "autoArchiveInterval": {
            "type": "integer",
            "description": "Auto-archive interval in minutes (0 means the maximum interval will be used)",
            "example": 10080
          },
          "volumes": {
            "description": "Array of volumes to attach to the sandbox",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SandboxVolume"
            }
          },
          "buildInfo": {
            "description": "Build information for the sandbox",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateBuildInfo"
              }
            ]
          }
        }
      },
      "SandboxLabels": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "object",
            "description": "Key-value pairs of labels",
            "example": {
              "environment": "dev",
              "team": "backend"
            },
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "labels"
        ]
      },
      "PortPreviewUrl": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Preview url",
            "example": "https://123456-mysandbox.runner.com"
          },
          "token": {
            "type": "string",
            "description": "Access token",
            "example": "ul67qtv-jl6wb9z5o3eii-ljqt9qed6l"
          },
          "legacyProxyUrl": {
            "type": "string",
            "description": "Legacy preview url using runner domain",
            "example": "https://3000-mysandbox.runner.com"
          }
        },
        "required": [
          "url",
          "token"
        ]
      },
      "CreateRunner": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "apiUrl": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "cpu": {
            "type": "number"
          },
          "memory": {
            "type": "number"
          },
          "disk": {
            "type": "number"
          },
          "gpu": {
            "type": "number"
          },
          "gpuType": {
            "type": "string"
          },
          "class": {
            "type": "string",
            "enum": [
              "small",
              "medium",
              "large"
            ],
            "example": "small"
          },
          "capacity": {
            "type": "number"
          },
          "region": {
            "type": "string",
            "enum": [
              "eu",
              "us",
              "asia"
            ],
            "example": "eu"
          }
        },
        "required": [
          "domain",
          "apiUrl",
          "apiKey",
          "cpu",
          "memory",
          "disk",
          "gpu",
          "gpuType",
          "class",
          "capacity",
          "region"
        ]
      },
      "SandboxClass": {
        "type": "string",
        "enum": [
          "small",
          "medium",
          "large"
        ],
        "description": "The class of the runner"
      },
      "RunnerRegion": {
        "type": "string",
        "enum": [
          "eu",
          "us",
          "asia"
        ],
        "description": "The region of the runner"
      },
      "RunnerState": {
        "type": "string",
        "enum": [
          "initializing",
          "ready",
          "disabled",
          "decommissioned",
          "unresponsive"
        ],
        "description": "The state of the runner"
      },
      "Runner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the runner",
            "example": "runner123"
          },
          "domain": {
            "type": "string",
            "description": "The domain of the runner",
            "example": "runner1.example.com"
          },
          "apiUrl": {
            "type": "string",
            "description": "The API URL of the runner",
            "example": "https://api.runner1.example.com"
          },
          "apiKey": {
            "type": "string",
            "description": "The API key for the runner",
            "example": "api-key-123"
          },
          "cpu": {
            "type": "number",
            "description": "The CPU capacity of the runner",
            "example": 8
          },
          "memory": {
            "type": "number",
            "description": "The memory capacity of the runner in GB",
            "example": 16
          },
          "disk": {
            "type": "number",
            "description": "The disk capacity of the runner in GB",
            "example": 100
          },
          "gpu": {
            "type": "number",
            "description": "The GPU capacity of the runner",
            "example": 1
          },
          "gpuType": {
            "type": "string",
            "description": "The type of GPU"
          },
          "class": {
            "description": "The class of the runner",
            "example": "small",
            "allOf": [
              {
                "$ref": "#/components/schemas/SandboxClass"
              }
            ]
          },
          "used": {
            "type": "number",
            "description": "The current usage of the runner",
            "example": 2
          },
          "capacity": {
            "type": "number",
            "description": "The capacity of the runner",
            "example": 10
          },
          "region": {
            "description": "The region of the runner",
            "example": "eu",
            "allOf": [
              {
                "$ref": "#/components/schemas/RunnerRegion"
              }
            ]
          },
          "state": {
            "description": "The state of the runner",
            "example": "initializing",
            "allOf": [
              {
                "$ref": "#/components/schemas/RunnerState"
              }
            ]
          },
          "lastChecked": {
            "type": "string",
            "description": "The last time the runner was checked",
            "example": "2024-10-01T12:00:00Z"
          },
          "unschedulable": {
            "type": "boolean",
            "description": "Whether the runner is unschedulable",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the runner",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the runner",
            "example": "2023-10-01T12:00:00Z"
          }
        },
        "required": [
          "id",
          "domain",
          "apiUrl",
          "apiKey",
          "cpu",
          "memory",
          "disk",
          "gpu",
          "gpuType",
          "class",
          "used",
          "capacity",
          "region",
          "state",
          "unschedulable",
          "createdAt",
          "updatedAt"
        ]
      },
      "RunnerSnapshotDto": {
        "type": "object",
        "properties": {
          "runnerSnapshotId": {
            "type": "string",
            "description": "Runner snapshot ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "runnerId": {
            "type": "string",
            "description": "Runner ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "runnerDomain": {
            "type": "string",
            "description": "Runner domain",
            "example": "runner.example.com"
          }
        },
        "required": [
          "runnerSnapshotId",
          "runnerId",
          "runnerDomain"
        ]
      },
      "ProjectDirResponse": {
        "type": "object",
        "properties": {
          "dir": {
            "type": "string"
          }
        }
      },
      "FileInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isDir": {
            "type": "boolean"
          },
          "size": {
            "type": "number"
          },
          "modTime": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "group": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "isDir",
          "size",
          "modTime",
          "mode",
          "permissions",
          "owner",
          "group"
        ]
      },
      "Match": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string"
          },
          "line": {
            "type": "number"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "file",
          "line",
          "content"
        ]
      },
      "ReplaceRequest": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pattern": {
            "type": "string"
          },
          "newValue": {
            "type": "string"
          }
        },
        "required": [
          "files",
          "pattern",
          "newValue"
        ]
      },
      "ReplaceResult": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "SearchFilesResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "files"
        ]
      },
      "UploadFile": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "file",
          "path"
        ]
      },
      "GitAddRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "files": {
            "description": "files to add (use . for all files)",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "path",
          "files"
        ]
      },
      "ListBranchResponse": {
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "branches"
        ]
      },
      "GitBranchRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "name"
        ]
      },
      "GitDeleteBranchRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "name"
        ]
      },
      "GitCloneRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "commit_id": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path"
        ]
      },
      "GitCommitRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "message",
          "author",
          "email"
        ]
      },
      "GitCommitResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          }
        },
        "required": [
          "hash"
        ]
      },
      "GitCommitInfo": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": [
          "hash",
          "message",
          "author",
          "email",
          "timestamp"
        ]
      },
      "GitRepoRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "path"
        ]
      },
      "GitCheckoutRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch"
        ]
      },
      "FileStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "staging": {
            "type": "string"
          },
          "worktree": {
            "type": "string"
          },
          "extra": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "staging",
          "worktree",
          "extra"
        ]
      },
      "GitStatus": {
        "type": "object",
        "properties": {
          "currentBranch": {
            "type": "string"
          },
          "fileStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileStatus"
            }
          },
          "ahead": {
            "type": "number"
          },
          "behind": {
            "type": "number"
          },
          "branchPublished": {
            "type": "boolean"
          }
        },
        "required": [
          "currentBranch",
          "fileStatus"
        ]
      },
      "ExecuteRequest": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string"
          },
          "cwd": {
            "type": "string",
            "description": "Current working directory"
          },
          "timeout": {
            "type": "number",
            "description": "Timeout in seconds, defaults to 10 seconds"
          }
        },
        "required": [
          "command"
        ]
      },
      "ExecuteResponse": {
        "type": "object",
        "properties": {
          "exitCode": {
            "type": "number",
            "description": "Exit code",
            "example": 0
          },
          "result": {
            "type": "string",
            "description": "Command output",
            "example": "Command output here"
          }
        },
        "required": [
          "exitCode",
          "result"
        ]
      },
      "Command": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the command",
            "example": "cmd-123"
          },
          "command": {
            "type": "string",
            "description": "The command that was executed",
            "example": "ls -la"
          },
          "exitCode": {
            "type": "number",
            "description": "The exit code of the command",
            "example": 0
          }
        },
        "required": [
          "id",
          "command"
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "The ID of the session",
            "example": "session-123"
          },
          "commands": {
            "description": "The list of commands executed in this session",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Command"
            }
          }
        },
        "required": [
          "sessionId",
          "commands"
        ]
      },
      "CreateSessionRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "The ID of the session",
            "example": "session-123"
          }
        },
        "required": [
          "sessionId"
        ]
      },
      "SessionExecuteRequest": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The command to execute",
            "example": "ls -la"
          },
          "runAsync": {
            "type": "boolean",
            "description": "Whether to execute the command asynchronously",
            "example": false
          },
          "async": {
            "type": "boolean",
            "description": "Deprecated: Use runAsync instead. Whether to execute the command asynchronously",
            "example": false,
            "deprecated": true
          }
        },
        "required": [
          "command"
        ]
      },
      "SessionExecuteResponse": {
        "type": "object",
        "properties": {
          "cmdId": {
            "type": "string",
            "description": "The ID of the executed command",
            "example": "cmd-123"
          },
          "output": {
            "type": "string",
            "description": "The output of the executed command",
            "example": "total 20\ndrwxr-xr-x  4 user group  128 Mar 15 10:30 ."
          },
          "exitCode": {
            "type": "number",
            "description": "The exit code of the executed command",
            "example": 0
          }
        }
      },
      "Position": {
        "type": "object",
        "properties": {
          "line": {
            "type": "number"
          },
          "character": {
            "type": "number"
          }
        },
        "required": [
          "line",
          "character"
        ]
      },
      "CompletionContext": {
        "type": "object",
        "properties": {
          "triggerKind": {
            "type": "number"
          },
          "triggerCharacter": {
            "type": "string"
          }
        },
        "required": [
          "triggerKind"
        ]
      },
      "LspCompletionParams": {
        "type": "object",
        "properties": {
          "languageId": {
            "type": "string",
            "description": "Language identifier"
          },
          "pathToProject": {
            "type": "string",
            "description": "Path to the project"
          },
          "uri": {
            "type": "string",
            "description": "Document URI"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "context": {
            "$ref": "#/components/schemas/CompletionContext"
          }
        },
        "required": [
          "languageId",
          "pathToProject",
          "uri",
          "position"
        ]
      },
      "CompletionItem": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "kind": {
            "type": "number"
          },
          "detail": {
            "type": "string"
          },
          "documentation": {
            "type": "object"
          },
          "sortText": {
            "type": "string"
          },
          "filterText": {
            "type": "string"
          },
          "insertText": {
            "type": "string"
          }
        },
        "required": [
          "label"
        ]
      },
      "CompletionList": {
        "type": "object",
        "properties": {
          "isIncomplete": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletionItem"
            }
          }
        },
        "required": [
          "isIncomplete",
          "items"
        ]
      },
      "LspDocumentRequest": {
        "type": "object",
        "properties": {
          "languageId": {
            "type": "string",
            "description": "Language identifier"
          },
          "pathToProject": {
            "type": "string",
            "description": "Path to the project"
          },
          "uri": {
            "type": "string",
            "description": "Document URI"
          }
        },
        "required": [
          "languageId",
          "pathToProject",
          "uri"
        ]
      },
      "Range": {
        "type": "object",
        "properties": {
          "start": {
            "$ref": "#/components/schemas/Position"
          },
          "end": {
            "$ref": "#/components/schemas/Position"
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "LspLocation": {
        "type": "object",
        "properties": {
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "range",
          "uri"
        ]
      },
      "LspSymbol": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "number"
          },
          "location": {
            "$ref": "#/components/schemas/LspLocation"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "kind",
          "location",
          "name"
        ]
      },
      "LspServerRequest": {
        "type": "object",
        "properties": {
          "languageId": {
            "type": "string",
            "description": "Language identifier"
          },
          "pathToProject": {
            "type": "string",
            "description": "Path to the project"
          }
        },
        "required": [
          "languageId",
          "pathToProject"
        ]
      },
      "CreateSnapshot": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the snapshot",
            "example": "ubuntu-4vcpu-8ram-100gb"
          },
          "imageName": {
            "type": "string",
            "description": "The image name of the snapshot",
            "example": "ubuntu:22.04"
          },
          "entrypoint": {
            "description": "The entrypoint command for the snapshot",
            "example": "sleep infinity",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "general": {
            "type": "boolean",
            "description": "Whether the snapshot is general"
          },
          "cpu": {
            "type": "integer",
            "description": "CPU cores allocated to the resulting sandbox",
            "example": 1
          },
          "gpu": {
            "type": "integer",
            "description": "GPU units allocated to the resulting sandbox",
            "example": 0
          },
          "memory": {
            "type": "integer",
            "description": "Memory allocated to the resulting sandbox in GB",
            "example": 1
          },
          "disk": {
            "type": "integer",
            "description": "Disk space allocated to the sandbox in GB",
            "example": 3
          },
          "buildInfo": {
            "description": "Build information for the snapshot",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateBuildInfo"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "SnapshotState": {
        "type": "string",
        "enum": [
          "build_pending",
          "building",
          "pending",
          "pulling",
          "pending_validation",
          "validating",
          "active",
          "inactive",
          "error",
          "build_failed",
          "removing"
        ]
      },
      "SnapshotDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "general": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotState"
              }
            ]
          },
          "size": {
            "type": "number",
            "nullable": true
          },
          "entrypoint": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cpu": {
            "type": "number"
          },
          "gpu": {
            "type": "number"
          },
          "mem": {
            "type": "number"
          },
          "disk": {
            "type": "number"
          },
          "errorReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "lastUsedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "buildInfo": {
            "description": "Build information for the snapshot",
            "allOf": [
              {
                "$ref": "#/components/schemas/BuildInfo"
              }
            ]
          }
        },
        "required": [
          "id",
          "general",
          "name",
          "enabled",
          "state",
          "size",
          "entrypoint",
          "cpu",
          "gpu",
          "mem",
          "disk",
          "errorReason",
          "createdAt",
          "updatedAt",
          "lastUsedAt"
        ]
      },
      "ToggleState": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable or disable the snapshot/tag",
            "example": true
          }
        },
        "required": [
          "enabled"
        ]
      },
      "PaginatedSnapshotsDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SnapshotDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "totalPages"
        ]
      },
      "SetSnapshotGeneralStatusDto": {
        "type": "object",
        "properties": {
          "general": {
            "type": "boolean",
            "description": "Whether the snapshot is general",
            "example": true
          }
        },
        "required": [
          "general"
        ]
      },
      "SandboxInfo": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "The creation timestamp of the project",
            "example": "2023-10-01T12:00:00Z"
          },
          "name": {
            "type": "string",
            "description": "Deprecated: The name of the sandbox",
            "example": "MySandbox",
            "deprecated": true,
            "default": ""
          },
          "providerMetadata": {
            "type": "string",
            "description": "Additional metadata provided by the provider",
            "example": "{\"key\": \"value\"}"
          }
        },
        "required": [
          "created",
          "name"
        ]
      },
      "Workspace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the sandbox",
            "example": "sandbox123"
          },
          "organizationId": {
            "type": "string",
            "description": "The organization ID of the sandbox",
            "example": "organization123"
          },
          "snapshot": {
            "type": "string",
            "description": "The snapshot used for the sandbox",
            "example": "daytonaio/sandbox:latest"
          },
          "user": {
            "type": "string",
            "description": "The user associated with the project",
            "example": "daytona"
          },
          "env": {
            "type": "object",
            "description": "Environment variables for the sandbox",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "NODE_ENV": "production"
            }
          },
          "labels": {
            "type": "object",
            "description": "Labels for the sandbox",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "daytona.io/public": "true"
            }
          },
          "public": {
            "type": "boolean",
            "description": "Whether the sandbox http preview is public",
            "example": false
          },
          "target": {
            "type": "string",
            "description": "The target environment for the sandbox",
            "example": "local"
          },
          "cpu": {
            "type": "number",
            "description": "The CPU quota for the sandbox",
            "example": 2
          },
          "gpu": {
            "type": "number",
            "description": "The GPU quota for the sandbox",
            "example": 0
          },
          "memory": {
            "type": "number",
            "description": "The memory quota for the sandbox",
            "example": 4
          },
          "disk": {
            "type": "number",
            "description": "The disk quota for the sandbox",
            "example": 10
          },
          "state": {
            "description": "The state of the sandbox",
            "example": "creating",
            "allOf": [
              {
                "$ref": "#/components/schemas/SandboxState"
              }
            ]
          },
          "desiredState": {
            "description": "The desired state of the sandbox",
            "example": "destroyed",
            "allOf": [
              {
                "$ref": "#/components/schemas/SandboxDesiredState"
              }
            ]
          },
          "errorReason": {
            "type": "string",
            "description": "The error reason of the sandbox",
            "example": "The sandbox is not running"
          },
          "backupState": {
            "type": "string",
            "description": "The state of the backup",
            "enum": [
              "None",
              "Pending",
              "InProgress",
              "Completed",
              "Error"
            ],
            "example": "None"
          },
          "backupCreatedAt": {
            "type": "string",
            "description": "The creation timestamp of the last backup",
            "example": "2024-10-01T12:00:00Z"
          },
          "autoStopInterval": {
            "type": "number",
            "description": "Auto-stop interval in minutes (0 means disabled)",
            "example": 30
          },
          "autoArchiveInterval": {
            "type": "number",
            "description": "Auto-archive interval in minutes",
            "example": 10080
          },
          "runnerDomain": {
            "type": "string",
            "description": "The domain name of the runner",
            "example": "runner.example.com"
          },
          "volumes": {
            "description": "Array of volumes attached to the sandbox",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SandboxVolume"
            }
          },
          "buildInfo": {
            "description": "Build information for the sandbox",
            "allOf": [
              {
                "$ref": "#/components/schemas/BuildInfo"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the sandbox",
            "example": "2024-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the sandbox",
            "example": "2024-10-01T12:00:00Z"
          },
          "class": {
            "type": "string",
            "description": "The class of the sandbox",
            "enum": [
              "small",
              "medium",
              "large"
            ],
            "example": "small",
            "deprecated": true
          },
          "daemonVersion": {
            "type": "string",
            "description": "The version of the daemon running in the sandbox",
            "example": "1.0.0"
          },
          "name": {
            "type": "string",
            "description": "The name of the workspace",
            "example": "MyWorkspace",
            "default": ""
          },
          "image": {
            "type": "string",
            "description": "The image used for the workspace",
            "example": "daytonaio/workspace:latest"
          },
          "snapshotState": {
            "type": "string",
            "description": "The state of the snapshot",
            "enum": [
              "None",
              "Pending",
              "InProgress",
              "Completed",
              "Error"
            ],
            "example": "None"
          },
          "snapshotCreatedAt": {
            "type": "string",
            "description": "The creation timestamp of the last snapshot",
            "example": "2024-10-01T12:00:00Z"
          },
          "info": {
            "description": "Additional information about the sandbox",
            "allOf": [
              {
                "$ref": "#/components/schemas/SandboxInfo"
              }
            ]
          }
        },
        "required": [
          "id",
          "organizationId",
          "user",
          "env",
          "labels",
          "public",
          "target",
          "cpu",
          "gpu",
          "memory",
          "disk",
          "name"
        ]
      },
      "CreateWorkspace": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "The image used for the workspace",
            "example": "daytonaio/workspace:latest"
          },
          "user": {
            "type": "string",
            "description": "The user associated with the project",
            "example": "daytona"
          },
          "env": {
            "type": "object",
            "description": "Environment variables for the workspace",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "NODE_ENV": "production"
            }
          },
          "labels": {
            "type": "object",
            "description": "Labels for the workspace",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "daytona.io/public": "true"
            }
          },
          "public": {
            "type": "boolean",
            "description": "Whether the workspace http preview is publicly accessible",
            "example": false
          },
          "class": {
            "type": "string",
            "description": "The workspace class type",
            "enum": [
              "small",
              "medium",
              "large"
            ],
            "example": "small"
          },
          "target": {
            "type": "string",
            "description": "The target (region) where the workspace will be created",
            "enum": [
              "eu",
              "us",
              "asia"
            ],
            "example": "eu"
          },
          "cpu": {
            "type": "integer",
            "description": "CPU cores allocated to the workspace",
            "example": 2
          },
          "gpu": {
            "type": "integer",
            "description": "GPU units allocated to the workspace",
            "example": 1
          },
          "memory": {
            "type": "integer",
            "description": "Memory allocated to the workspace in GB",
            "example": 1
          },
          "disk": {
            "type": "integer",
            "description": "Disk space allocated to the workspace in GB",
            "example": 3
          },
          "autoStopInterval": {
            "type": "integer",
            "description": "Auto-stop interval in minutes (0 means disabled)",
            "example": 30
          },
          "autoArchiveInterval": {
            "type": "integer",
            "description": "Auto-archive interval in minutes (0 means the maximum interval will be used)",
            "example": 10080
          },
          "volumes": {
            "description": "Array of volumes to attach to the workspace",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SandboxVolume"
            }
          },
          "buildInfo": {
            "description": "Build information for the workspace",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateBuildInfo"
              }
            ]
          }
        }
      },
      "VolumeState": {
        "type": "string",
        "enum": [
          "creating",
          "ready",
          "pending_create",
          "pending_delete",
          "deleting",
          "deleted",
          "error"
        ],
        "description": "Volume state"
      },
      "VolumeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Volume ID",
            "example": "vol-12345678"
          },
          "name": {
            "type": "string",
            "description": "Volume name",
            "example": "my-volume"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "state": {
            "description": "Volume state",
            "example": "ready",
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeState"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "lastUsedAt": {
            "type": "string",
            "description": "Last used timestamp",
            "example": "2023-01-01T00:00:00.000Z",
            "nullable": true
          },
          "errorReason": {
            "type": "string",
            "description": "The error reason of the volume",
            "example": "Error processing volume",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "organizationId",
          "state",
          "createdAt",
          "updatedAt",
          "errorReason"
        ]
      },
      "CreateVolume": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateDockerRegistry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Registry name"
          },
          "url": {
            "type": "string",
            "description": "Registry URL"
          },
          "username": {
            "type": "string",
            "description": "Registry username"
          },
          "password": {
            "type": "string",
            "description": "Registry password"
          },
          "project": {
            "type": "string",
            "description": "Registry project"
          },
          "registryType": {
            "type": "string",
            "description": "Registry type",
            "enum": [
              "internal",
              "organization",
              "public",
              "transient"
            ],
            "default": "internal"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Set as default registry",
            "default": false
          }
        },
        "required": [
          "name",
          "url",
          "username",
          "password",
          "project",
          "registryType",
          "isDefault"
        ]
      },
      "DockerRegistry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Registry ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Registry name",
            "example": "My Docker Hub"
          },
          "url": {
            "type": "string",
            "description": "Registry URL",
            "example": "https://registry.hub.docker.com"
          },
          "username": {
            "type": "string",
            "description": "Registry username",
            "example": "username"
          },
          "project": {
            "type": "string",
            "description": "Registry project",
            "example": "my-project"
          },
          "registryType": {
            "type": "string",
            "description": "Registry type",
            "enum": [
              "internal",
              "organization",
              "public",
              "transient"
            ],
            "example": "internal"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-31T12:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-31T12:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "url",
          "username",
          "project",
          "registryType",
          "createdAt",
          "updatedAt"
        ]
      },
      "RegistryPushAccessDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Temporary username for registry authentication",
            "example": "temp-user-123"
          },
          "secret": {
            "type": "string",
            "description": "Temporary secret for registry authentication",
            "example": "eyJhbGciOiJIUzI1NiIs..."
          },
          "registryUrl": {
            "type": "string",
            "description": "Registry URL",
            "example": "registry.example.com"
          },
          "registryId": {
            "type": "string",
            "description": "Registry ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "type": "string",
            "description": "Registry project ID",
            "example": "library"
          },
          "expiresAt": {
            "type": "string",
            "description": "Token expiration time in ISO format",
            "example": "2023-12-31T23:59:59Z"
          }
        },
        "required": [
          "username",
          "secret",
          "registryUrl",
          "registryId",
          "project",
          "expiresAt"
        ]
      },
      "UpdateDockerRegistry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Registry name"
          },
          "username": {
            "type": "string",
            "description": "Registry username"
          },
          "password": {
            "type": "string",
            "description": "Registry password"
          }
        },
        "required": [
          "name",
          "username"
        ]
      },
      "StorageAccessDto": {
        "type": "object",
        "properties": {
          "accessKey": {
            "type": "string",
            "description": "Access key for storage authentication",
            "example": "temp-user-123"
          },
          "secret": {
            "type": "string",
            "description": "Secret key for storage authentication",
            "example": "abchbGciOiJIUzI1NiIs..."
          },
          "sessionToken": {
            "type": "string",
            "description": "Session token for storage authentication",
            "example": "eyJhbGciOiJIUzI1NiIs..."
          },
          "storageUrl": {
            "type": "string",
            "description": "Storage URL",
            "example": "storage.example.com"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "bucket": {
            "type": "string",
            "description": "S3 bucket name",
            "example": "daytona"
          }
        },
        "required": [
          "accessKey",
          "secret",
          "sessionToken",
          "storageUrl",
          "organizationId",
          "bucket"
        ]
      }
    }
  }
}